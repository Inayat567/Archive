{"version":3,"file":"preload.js","mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,EACvE,CACA,CATD,CASGC,QAAQ,I,mBCRX,IAAIC,EAAsB,CCA1BA,EAAyBP,IACH,oBAAXQ,QAA0BA,OAAOC,aAC1CC,OAAOC,eAAeX,EAASQ,OAAOC,YAAa,CAAEG,MAAO,WAE7DF,OAAOC,eAAeX,EAAS,aAAc,CAAEY,OAAO,GAAO,G,YCL9D,MAAM,EAA+BC,QAAQ,YCCvCC,EAAMC,QAAQC,SAsDpB,MAAMC,EAAgB,WAARH,EACRI,EAAoB,UAARJ,EACZK,EAAkB,UAARL,E,OClDhB,EAAAM,cAAcC,kBAAkB,WAAY,CAC1CC,SAHwD,EAIxDC,OD6BF,SAAgBC,EAAaC,GAC3B,EAAAC,YAAYC,OAAO,SAAUH,EAAQC,EACvC,EC9BEG,iBDgCFC,iBACE,OAAO,IAAIC,SAAQD,MAAOE,EAASC,KACjC,IACE,MAAMC,EAAYC,IAChBH,EAAQG,EAAQ,EAElB,EAAAR,YAAYC,OAAO,mBAAoB,CAAEM,Y,CAC1C,MAAME,GACLH,EAAOG,E,IAGb,EC1CEC,UDRF,WACIC,QAAQC,IAAI,UAAW,EAAAC,QAGvB,IACE,IACIC,EADW,EAAAD,OAAOE,iBACSC,MAAMC,GACP,IAArBA,EAAQC,OAAOC,GAAgC,IAArBF,EAAQC,OAAOE,IAGlD,GAAGN,EAED,OADAH,QAAQC,IAAI,kBAAmBE,GACxB,CACLO,MAAOP,EAAgBI,OAAOC,EAC9BG,OAAQR,EAAgBI,OAAOE,E,CAGpC,MAAMX,GAEL,OADAE,QAAQY,MAAM,EAAGd,GACV,I,CAGT,IACE,MAAMe,EAAiB,EAAAX,OAAOY,qBACxB,MAAEJ,EAAK,OAAEC,GAAWE,EAAeE,SACzC,MAAO,CACLL,QACAC,S,CAEH,MAAMK,GAEL,OADAhB,QAAQY,MAAM,EAAGI,GACV,I,CAEb,ECxBEpC,MAAK,EACLE,QAAO,EACPD,UAAS,EACToC,KAAKC,EAAmBC,GACtB,EAAA9B,YAAY4B,KAAKC,EAAWC,EAC9B,EACA9B,YAAa,CACX+B,YAAYC,EAAmBF,GAC7B,EAAA9B,YAAY4B,KAAKI,EAASF,EAC5B,EAEAG,GAAGD,EAAmBE,GACpB,MAAMC,EAAe,CAACC,KAA6BN,IACjDI,KAAQJ,GAGV,OAFA,EAAA9B,YAAYiC,GAAGD,EAASG,GAEjB,KACL,EAAAnC,YAAYqC,eAAeL,EAASG,EAAa,CAErD,EACAG,KAAKN,EAAmBE,GACtB,EAAAlC,YAAYsC,KAAKN,GAAS,CAACI,KAAWN,IAASI,KAAQJ,IACzD,EACAS,IAAIP,EAAmBG,GACrB,EAAAnC,YAAYqC,eAAeL,EAASG,EACtC,KAIJK,OAAOC,iBAAiB,oBAAoB,KAC1C,IAAK,MAAMC,IAAc,CAAC,SAAU,OAAQ,YAC1C/B,QAAQC,IAAI,YAAY8B,IAAcrD,QAAQsD,SAASD,G","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///webpack/runtime/make namespace object","webpack:///external node-commonjs \"electron\"","webpack:///./src/main/preloadUtils.ts","webpack:///./src/main/preload.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");","import { ipcRenderer, screen } from 'electron';\nconst sys = process.platform;\n\nfunction getScreen(){\n    console.log('screen?', screen);\n\n    // linux bug for screen = undefined??\n    try{\n      let displays = screen.getAllDisplays()\n      let externalDisplay = displays.find((display) => {\n        return display.bounds.x !== 0 || display.bounds.y !== 0\n      })  \n\n      if(externalDisplay){\n        console.log('externalDisplay', externalDisplay)\n        return {\n          width: externalDisplay.bounds.x,\n          height: externalDisplay.bounds.y,\n        };\n      }\n    }catch(err){\n      console.error(2, err);\n      return null;\n    }\n\n    try{\n      const primaryDisplay = screen.getPrimaryDisplay();\n      const { width, height } = primaryDisplay.workArea\n      return {\n        width,\n        height,\n      } \n    }catch(e){\n      console.error(3, e);\n      return null;\n    }\n}\n\nfunction resize(params: any, stayOnTop: boolean){\n  ipcRenderer.invoke('resize', params, stayOnTop)\n}\n\nasync function shareableScreens(){\n  return new Promise(async (resolve, reject)=>{\n    try{\n      const callback = (sources: any)=>{\n        resolve(sources);\n      }\n      ipcRenderer.invoke('shareableScreens', { callback });\n    }catch(err){\n      reject(err);\n    }\n  })\n}\n\nconst isMac = sys === \"darwin\";\nconst isWindows = sys === \"win32\";\nconst isLinux = sys === \"linux\";\n\nexport{\n    resize,\n    getScreen,\n    shareableScreens,\n    isMac,\n    isWindows,\n    isLinux,\n}","import { contextBridge, ipcRenderer, IpcRendererEvent } from 'electron';\nimport { resize, getScreen, shareableScreens, isMac, isLinux, isWindows } from './preloadUtils'\n\nexport type Channels = any; //'ipc-example';\n\nconst isDebug = process.env.NODE_ENV === 'development' || process.env.DEBUG_PROD === 'true';\n\ncontextBridge.exposeInMainWorld('electron', {\n  isDebug,\n  resize,\n  shareableScreens,\n  getScreen,\n  isMac,\n  isLinux,\n  isWindows,\n  send(eventName: string, args: any){ // disable?\n    ipcRenderer.send(eventName, args); // TODO - send -> invoke (because safer)\n  },\n  ipcRenderer: { // disable?\n    sendMessage(channel: Channels, args: any[]) {\n      ipcRenderer.send(channel, args); \n    },\n   \n    on(channel: Channels, func: (...args: any[]) => void) {\n      const subscription = (_event: IpcRendererEvent, ...args: unknown[]) =>\n        func(...args);\n      ipcRenderer.on(channel, subscription);\n\n      return () => {\n        ipcRenderer.removeListener(channel, subscription);\n      };\n    },\n    once(channel: Channels, func: (...args: any[]) => void) {\n      ipcRenderer.once(channel, (_event, ...args) => func(...args));\n    },\n    off(channel: Channels, subscription: any){\n      ipcRenderer.removeListener(channel, subscription);\n    }\n  },\n});\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  for (const dependency of ['chrome', 'node', 'electron']) {\n    console.log(`VERSION: ${dependency}`, process.versions[dependency])\n  }\n})\n"],"names":["root","factory","exports","module","define","amd","a","i","global","__webpack_require__","Symbol","toStringTag","Object","defineProperty","value","require","sys","process","platform","isMac","isWindows","isLinux","contextBridge","exposeInMainWorld","isDebug","resize","params","stayOnTop","ipcRenderer","invoke","shareableScreens","async","Promise","resolve","reject","callback","sources","err","getScreen","console","log","screen","externalDisplay","getAllDisplays","find","display","bounds","x","y","width","height","error","primaryDisplay","getPrimaryDisplay","workArea","e","send","eventName","args","sendMessage","channel","on","func","subscription","_event","removeListener","once","off","window","addEventListener","dependency","versions"],"sourceRoot":""}