!function(e,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n();else if("function"==typeof define&&define.amd)define([],n);else{var r=n();for(var o in r)("object"==typeof exports?exports:e)[o]=r[o]}}(global,(()=>(()=>{"use strict";var e={r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};e.r(n);const r=require("electron"),o=process.platform;const t="darwin"===o,s="win32"===o,i="linux"===o;return r.contextBridge.exposeInMainWorld("electron",{isDebug:!1,resize:function(e,n){r.ipcRenderer.invoke("resize",e,n)},shareableScreens:async function(){return new Promise((async(e,n)=>{try{const n=n=>{e(n)};r.ipcRenderer.invoke("shareableScreens",{callback:n})}catch(e){n(e)}}))},getScreen:function(){console.log("screen?",r.screen);try{let e=r.screen.getAllDisplays().find((e=>0!==e.bounds.x||0!==e.bounds.y));if(e)return console.log("externalDisplay",e),{width:e.bounds.x,height:e.bounds.y}}catch(e){return console.error(2,e),null}try{const e=r.screen.getPrimaryDisplay(),{width:n,height:o}=e.workArea;return{width:n,height:o}}catch(e){return console.error(3,e),null}},isMac:t,isLinux:i,isWindows:s,send(e,n){r.ipcRenderer.send(e,n)},ipcRenderer:{sendMessage(e,n){r.ipcRenderer.send(e,n)},on(e,n){const o=(e,...r)=>n(...r);return r.ipcRenderer.on(e,o),()=>{r.ipcRenderer.removeListener(e,o)}},once(e,n){r.ipcRenderer.once(e,((e,...r)=>n(...r)))},off(e,n){r.ipcRenderer.removeListener(e,n)}}}),window.addEventListener("DOMContentLoaded",(()=>{for(const e of["chrome","node","electron"])console.log(`VERSION: ${e}`,process.versions[e])})),n})()));
//# sourceMappingURL=preload.js.map